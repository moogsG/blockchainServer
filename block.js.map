{"version":3,"sources":["../src/block.js"],"names":["calcNonce","index","prevHash","timestamp","data","x","nonce","hash","SHA256","toString","substring","console","log","calcHash","create","prev","last","Date","getTime","isNewBlockValid","newBlock","prevBlock","isValid"],"mappings":";;;;;;;AAAA;;;;AAEA;;;;;;AAEO,MAAMA,gCAAY,CAAC,EAACC,KAAD,EAAQC,QAAR,EAAkBC,SAAlB,EAA6BC,IAA7B,EAAD,KAAwC;AAC/D,SAAK,IAAIC,IAAI,CAAb,EAAgBA,KAAK,MAArB,EAA6BA,GAA7B,EAAkC;AAChC,YAAIC,QAAQ,CAAZ;AACA,YAAIC,OAAO,mBAASC,MAAT,CAAgBP,QAAQC,QAAR,GAAmBC,SAAnB,GAA+BC,IAA/B,GAAsCC,CAAtD,EAAyDI,QAAzD,EAAX;AACA,YAAIF,KAAKG,SAAL,CAAe,CAAf,EAAkB,CAAlB,MAAyB,MAA7B,EAAqC;AACnCC,oBAAQC,GAAR,CAAYP,CAAZ;AACA,mBAAOA,EAAEI,QAAF,EAAP;AACA;AACD;AACF;AACF,CAVM;;AAYA,MAAMI,8BAAW,CAAC,EAACZ,KAAD,EAAQC,QAAR,EAAkBC,SAAlB,EAA6BC,IAA7B,EAAD,KAAwC;AAC9D,SAAK,IAAIC,IAAI,CAAb,EAAgBA,KAAK,MAArB,EAA6BA,GAA7B,EAAkC;AAChC,YAAIC,QAAQ,CAAZ;AACA,YAAIC,OAAO,mBAASC,MAAT,CAAgBP,QAAQC,QAAR,GAAmBC,SAAnB,GAA+BC,IAA/B,GAAsCC,CAAtD,EAAyDI,QAAzD,EAAX;AACA,YAAIF,KAAKG,SAAL,CAAe,CAAf,EAAkB,CAAlB,MAAyB,MAA7B,EAAqC;AACnC,mBAAOH,IAAP;AACA;AACD;AACF;AAEF,CAVM;;AAYA,MAAMO,0BAAUV,IAAD,IAAU;AAC5B,UAAMW,OAAO,gBAAMC,IAAN,EAAb;AACA,UAAMf,QAAQc,KAAKd,KAAL,GAAa,CAA3B;AACA,UAAME,YAAY,IAAIc,IAAJ,GAAWC,OAAX,EAAlB;AACA,UAAMhB,WAAWa,KAAKR,IAAtB;AACA,UAAMD,QAAQN,UAAU;AACpBC,aADoB;AAEpBC,gBAFoB;AAGpBC,iBAHoB;AAIpBC;AAJoB,KAAV,CAAd;AAMA,UAAMG,OAAOM,SAAS;AAClBZ,aADkB;AAElBC,gBAFkB;AAGlBC,iBAHkB;AAIlBC;AAJkB,KAAT,CAAb;;AAOA,WAAO;AACHH,aADG;AAEHE,iBAFG;AAGHC,YAHG;AAIHF,gBAJG;AAKHK,YALG;AAMHD;AANG,KAAP;AAQH,CA1BM;;AA4BA,MAAMa,4CAAkB,CAACC,QAAD,EAAWC,YAAY,gBAAML,IAAN,EAAvB,KAAwC;AACnE,QAAIM,UAAU,IAAd;;AAEA,QAAID,UAAUpB,KAAV,GAAkB,CAAlB,KAAwBmB,SAASnB,KAArC,EAA4C;AACxCU,gBAAQC,GAAR,CAAY,6BAAZ;AACAU,kBAAU,KAAV;AACH,KAHD,MAGO,IAAID,UAAUd,IAAV,KAAmBa,SAASlB,QAAhC,EAA0C;AAC7CS,gBAAQC,GAAR,CAAY,gCAAZ;AACAU,kBAAU,KAAV;AACH,KAHM,MAGA,IAAIT,SAASO,QAAT,MAAuBA,SAASb,IAApC,EAA0C;AAC7CI,gBAAQC,GAAR,CAAY,4BAAZ;AACAU,kBAAU,KAAV;AACH;;AAED,WAAOA,OAAP;AACH,CAfM","file":"block.js","sourcesContent":["import CryptoJS from 'crypto-js';\n\nimport chain from './chain';\n\nexport const calcNonce = ({index, prevHash, timestamp, data}) => {\n  for (var x = 0; x <= 500000; x++) {\n    var nonce = 0;\n    let hash = CryptoJS.SHA256(index + prevHash + timestamp + data + x).toString();\n    if (hash.substring(0, 4) === '0000') {\n      console.log(x);\n      return x.toString();\n      break;\n    }\n  }\n}\n\nexport const calcHash = ({index, prevHash, timestamp, data}) => {\n  for (var x = 0; x <= 500000; x++) {\n    var nonce = 0;\n    let hash = CryptoJS.SHA256(index + prevHash + timestamp + data + x).toString();\n    if (hash.substring(0, 4) === '0000') {\n      return hash;\n      break;\n    }\n  }\n\n}\n\nexport const create = (data) => {\n    const prev = chain.last();\n    const index = prev.index + 1;\n    const timestamp = new Date().getTime();\n    const prevHash = prev.hash;\n    const nonce = calcNonce({\n        index,\n        prevHash,\n        timestamp,\n        data\n    });\n    const hash = calcHash({\n        index,\n        prevHash,\n        timestamp,\n        data\n    });\n\n    return {\n        index,\n        timestamp,\n        data,\n        prevHash,\n        hash,\n        nonce\n    };\n};\n\nexport const isNewBlockValid = (newBlock, prevBlock = chain.last()) => {\n    let isValid = true;\n\n    if (prevBlock.index + 1 !== newBlock.index) {\n        console.log('New block has invalid index');\n        isValid = false;\n    } else if (prevBlock.hash !== newBlock.prevHash) {\n        console.log('New block has invalid prevHash');\n        isValid = false;\n    } else if (calcHash(newBlock) !== newBlock.hash) {\n        console.log('New block has invalid hash');\n        isValid = false;\n    }\n\n    return isValid;\n};\n"]}