{"version":3,"sources":["../src/chain.js"],"names":["Chain","instance","origin","index","timestamp","data","prevHash","hash","nonce","chain","isChainValid","newChain","isValid","JSON","stringify","console","log","tempChain","i","length","push","get","update","block","last","slice","pop","replace","create","init"],"mappings":";;;;;;AAAA;;AAEA,MAAMA,QAAS,YAAY;AAAE;AACzB,QAAIC,QAAJ;AACA,UAAMC,SAAS;AACXC,eAAO,CADI;AAEXC,mBAAW,CAFA;AAGXC,cAAM,8BAHK;AAIXC,kBAAU,CAJC;AAKXC,cAAM,qBAAS;AACXJ,mBAAO,CADI;AAEXG,sBAAU,CAFC;AAGXF,uBAAW,CAHA;AAIXC,kBAAM;AAJK,SAAT,CALK;AAWXG,eAAO,sBAAU;AACbL,mBAAO,CADM;AAEbG,sBAAU,CAFG;AAGbF,uBAAW,CAHE;AAIbC,kBAAM;AAJO,SAAV;AAXI,KAAf;AAkBA,UAAMI,QAAQ,CAACP,MAAD,CAAd;;AAEA,aAASQ,YAAT,CAAsBC,QAAtB,EAAgC;AAC5B,YAAIC,UAAU,IAAd;;AAEA,YAAIC,KAAKC,SAAL,CAAeH,SAAS,CAAT,CAAf,MAAgCE,KAAKC,SAAL,CAAeZ,MAAf,CAApC,EAA4D;AACxDa,oBAAQC,GAAR,CAAY,2DAAZ;AACAJ,sBAAU,KAAV;AACA,mBAAOA,OAAP;AACH;;AAED,cAAMK,YAAY,CAACN,SAAS,CAAT,CAAD,CAAlB;AACA,aAAK,IAAIO,IAAI,CAAb,EAAgBA,IAAIP,SAASQ,MAA7B,EAAqCD,KAAK,CAA1C,EAA6C;AACzC,gBAAI,4BAAgBP,SAASO,CAAT,CAAhB,EAA6BD,UAAUC,IAAI,CAAd,CAA7B,CAAJ,EAAoD;AAChDD,0BAAUG,IAAV,CAAeT,SAASO,CAAT,CAAf;AACH,aAFD,MAEO;AACHN,0BAAU,KAAV;AACA,uBAAOA,OAAP;AACH;AACJ;;AAED,eAAOA,OAAP;AACH;;AAED,aAASS,GAAT,GAAe;AACX,eAAOZ,KAAP;AACH;;AAED,aAASa,MAAT,CAAgBC,KAAhB,EAAuB;AACnB,YAAI,4BAAgBA,KAAhB,CAAJ,EAA4B;AACxBd,kBAAMW,IAAN,CAAWG,KAAX;AACH;AACJ;;AAED,aAASC,IAAT,GAAgB;AACZ,eAAOf,MAAMgB,KAAN,GAAcC,GAAd,EAAP;AACH;;AAED,aAASC,OAAT,CAAiBhB,QAAjB,EAA2B;AACvB,YAAID,aAAaC,QAAb,KAA0BA,SAASQ,MAAT,GAAkBV,MAAMU,MAAtD,EAA8D;AAC1DJ,oBAAQC,GAAR,CAAY,sEAAZ;AACAP,kBAAMU,MAAN,GAAe,CAAf,CAF0D,CAExC;AAClBV,kBAAMW,IAAN,CAAW,GAAGT,QAAd,EAH0D,CAGjC;AAC5B,SAJD,MAIO;AACHI,oBAAQC,GAAR,CAAY,2BAAZ;AACH;AACJ;;AAED,aAASY,MAAT,GAAkB;AACd,eAAO;AACHP,eADG;AAEHC,kBAFG;AAGHE,gBAHG;AAIHG;AAJG,SAAP;AAMH;;AAED,WAAO;AACHE,eAAO;AACH,gBAAI,CAAC5B,QAAL,EAAe;AACXA,2BAAW2B,QAAX;AACH;AACD,mBAAO3B,QAAP;AACH;AANE,KAAP;AAQH,CArFc,EAAf;;kBAuFeD,MAAM6B,IAAN,E","file":"chain.js","sourcesContent":["import { calcHash, isNewBlockValid, calcNonce } from './block';\n\nconst Chain = (function () { // eslint-disable-line func-names\n    let instance;\n    const origin = {\n        index: 0,\n        timestamp: 0,\n        data: '{\"data\":\"Hello Blockchain!\"}',\n        prevHash: 0,\n        hash: calcHash({\n            index: 0,\n            prevHash: 0,\n            timestamp: 0,\n            data: '{\"data\":\"Hello Blockchain!\"}'\n        }),\n        nonce: calcNonce({\n            index: 0,\n            prevHash: 0,\n            timestamp: 0,\n            data: '{\"data\":\"Hello Blockchain!\"}'\n        })\n    };\n    const chain = [origin];\n\n    function isChainValid(newChain) {\n        let isValid = true;\n\n        if (JSON.stringify(newChain[0]) !== JSON.stringify(origin)) {\n            console.log('Received chain is invalid. Origin block does not coincide');\n            isValid = false;\n            return isValid;\n        }\n\n        const tempChain = [newChain[0]];\n        for (let i = 1; i < newChain.length; i += 1) {\n            if (isNewBlockValid(newChain[i], tempChain[i - 1])) {\n                tempChain.push(newChain[i]);\n            } else {\n                isValid = false;\n                return isValid;\n            }\n        }\n\n        return isValid;\n    }\n\n    function get() {\n        return chain;\n    }\n\n    function update(block) {\n        if (isNewBlockValid(block)) {\n            chain.push(block);\n        }\n    }\n\n    function last() {\n        return chain.slice().pop();\n    }\n\n    function replace(newChain) {\n        if (isChainValid(newChain) && newChain.length > chain.length) {\n            console.log('Received chain is valid. Replacing current chain with received chain');\n            chain.length = 0; // clear current chain\n            chain.push(...newChain); // fill current already empty chain with the new one if valid\n        } else {\n            console.log('Received chain is invalid');\n        }\n    }\n\n    function create() {\n        return {\n            get,\n            update,\n            last,\n            replace\n        };\n    }\n\n    return {\n        init() {\n            if (!instance) {\n                instance = create();\n            }\n            return instance;\n        }\n    };\n}());\n\nexport default Chain.init();\n"]}