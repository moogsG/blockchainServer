{"version":3,"sources":["../../src/p2p/handlers.js"],"names":["write","ws","message","console","log","send","JSON","stringify","broadcast","get","map","socket","handleChainResponse","receivedBlocks","parse","data","sort","b1","b2","index","latestBlockReceived","length","latestBlockHeld","last","hash","prevHash","update","replace","onMessage","on","type","QUERY_LATEST","QUERY_ALL","RESPONSE_BLOCKCHAIN","onError","closeConnection","peer","url","remove"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;AAEO,MAAMA,wBAAQ,CAACC,EAAD,EAAKC,OAAL,KAAiB;AAClCC,YAAQC,GAAR,CAAY,oCAAZ,EAAkDF,OAAlD;AACAD,OAAGI,IAAH,CAAQC,KAAKC,SAAL,CAAeL,OAAf,CAAR;AACH,CAHM;;AAKA,MAAMM,gCAAaN,OAAD,IAAa;AAClCC,YAAQC,GAAR,CAAY,wCAAZ,EAAsDF,OAAtD;AACA,sBAAQO,GAAR,GAAcC,GAAd,CAAkBC,UAAUX,MAAMW,MAAN,EAAcT,OAAd,CAA5B;AACH,CAHM;;AAKP,MAAMU,sBAAuBV,OAAD,IAAa;AACrC,UAAMW,iBAAiBP,KAAKQ,KAAL,CAAWZ,QAAQa,IAAnB,EAAyBC,IAAzB,CAA8B,CAACC,EAAD,EAAKC,EAAL,KAAaD,GAAGE,KAAH,GAAWD,GAAGC,KAAzD,CAAvB;AACA,UAAMC,sBAAsBP,eAAeA,eAAeQ,MAAf,GAAwB,CAAvC,CAA5B;AACA,UAAMC,kBAAkB,gBAAMC,IAAN,EAAxB;;AAEA,QAAIH,oBAAoBD,KAApB,KAA8BG,gBAAgBH,KAAlD,EAAyD;AACrDhB,gBAAQC,GAAR,CAAY,yDAAZ;AACA;AACH;;AAEDD,YAAQC,GAAR,CAAa,qCAAoCkB,gBAAgBH,KAAM,cAAaC,oBAAoBD,KAAM,EAA9G;;AAEA,QAAIG,gBAAgBE,IAAhB,KAAyBJ,oBAAoBK,QAAjD,EAA2D;AACvDtB,gBAAQC,GAAR,CAAY,+CAAZ;AACA,wBAAMsB,MAAN,CAAaN,mBAAb;AACAZ,kBAAU,iCAAV;AACH,KAJD,MAIO,IAAIK,eAAeQ,MAAf,KAA0B,CAA9B,EAAiC;AACpClB,gBAAQC,GAAR,CAAY,0CAAZ;AACAI,kBAAU,2BAAV;AACH,KAHM,MAGA;AACHL,gBAAQC,GAAR,CAAY,4DAAZ;AACA,wBAAMuB,OAAN,CAAcd,cAAd;AACH;AACJ,CAvBD;;AAyBO,MAAMe,gCAAa3B,EAAD,IAAQ;AAC7BA,OAAG4B,EAAH,CAAM,SAAN,EAAkBd,IAAD,IAAU;AACvB,cAAMb,UAAUI,KAAKQ,KAAL,CAAWC,IAAX,CAAhB;AACAZ,gBAAQC,GAAR,CAAa,qBAAoBE,KAAKC,SAAL,CAAeL,OAAf,CAAwB,EAAzD;;AAEA,gBAAQA,QAAQ4B,IAAhB;AACI,iBAAK,mBAAYC,YAAjB;AACI/B,sBAAMC,EAAN,EAAU,iCAAV;AACA;AACJ,iBAAK,mBAAY+B,SAAjB;AACA7B,wBAAQC,GAAR,CAAY,8CAAZ;AACIJ,sBAAMC,EAAN,EAAU,gCAAV;AACA;AACJ,iBAAK,mBAAYgC,mBAAjB;AACIrB,oCAAoBV,OAApB;AACA;AACJ;AACIC,wBAAQC,GAAR,CAAY,uCAAZ;AACA;AAbR;AAeH,KAnBD;AAoBH,CArBM;;AAuBA,MAAM8B,4BAAWjC,EAAD,IAAQ;AAC3B,UAAMkC,kBAAmBC,IAAD,IAAU;AAC9BjC,gBAAQC,GAAR,CAAa,6BAA4BgC,KAAKC,GAAI,EAAlD;AACA,0BAAQC,MAAR,CAAeF,IAAf;AACH,KAHD;AAIAnC,OAAG4B,EAAH,CAAM,OAAN,EAAe,MAAMM,gBAAgBlC,EAAhB,CAArB;AACAA,OAAG4B,EAAH,CAAM,OAAN,EAAe,MAAMM,gBAAgBlC,EAAhB,CAArB;AACH,CAPM","file":"handlers.js","sourcesContent":["import chain from '../chain';\nimport sockets from './sockets';\nimport { MessageType } from './types';\nimport { queryAllMsg, responseChainMsg, responseLatestMsg } from './actions';\n\nexport const write = (ws, message) => {\n    console.log('Write message data to p2p socket: ', message);\n    ws.send(JSON.stringify(message));\n};\n\nexport const broadcast = (message) => {\n    console.log('Broadcast message data to p2p socket: ', message);\n    sockets.get().map(socket => write(socket, message));\n};\n\nconst handleChainResponse = (message) => {\n    const receivedBlocks = JSON.parse(message.data).sort((b1, b2) => (b1.index - b2.index));\n    const latestBlockReceived = receivedBlocks[receivedBlocks.length - 1];\n    const latestBlockHeld = chain.last();\n\n    if (latestBlockReceived.index === latestBlockHeld.index) {\n        console.log('Received chain is no longer than hold chain. Do nothing');\n        return;\n    }\n\n    console.log(`Chain is possibly behind. We got: ${latestBlockHeld.index} Peer got: ${latestBlockReceived.index}`);\n\n    if (latestBlockHeld.hash === latestBlockReceived.prevHash) {\n        console.log('We can append the received block to our chain');\n        chain.update(latestBlockReceived);\n        broadcast(responseLatestMsg());\n    } else if (receivedBlocks.length === 1) {\n        console.log('We have to query the chain from our peer');\n        broadcast(queryAllMsg());\n    } else {\n        console.log('Received chain is longer than current chain. Replace chain');\n        chain.replace(receivedBlocks);\n    }\n};\n\nexport const onMessage = (ws) => {\n    ws.on('message', (data) => {\n        const message = JSON.parse(data);\n        console.log(`Received message: ${JSON.stringify(message)}`);\n\n        switch (message.type) {\n            case MessageType.QUERY_LATEST:\n                write(ws, responseLatestMsg());\n                break;\n            case MessageType.QUERY_ALL:\n            console.log(\"%^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\")\n                write(ws, responseChainMsg());\n                break;\n            case MessageType.RESPONSE_BLOCKCHAIN:\n                handleChainResponse(message);\n                break;\n            default:\n                console.log('Received message type is out of scope');\n                break;\n        }\n    });\n};\n\nexport const onError = (ws) => {\n    const closeConnection = (peer) => {\n        console.log(`Close connection to peer: ${peer.url}`);\n        sockets.remove(peer);\n    };\n    ws.on('close', () => closeConnection(ws));\n    ws.on('error', () => closeConnection(ws));\n};\n"]}